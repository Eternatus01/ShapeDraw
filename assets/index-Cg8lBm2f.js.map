{"version":3,"file":"index-Cg8lBm2f.js","sources":["../../src/adapters/input/canvas-input-handler.ts","../../src/adapters/renderers/canvas-renderer.ts","../../src/core/entities/Shape.ts","../../src/core/entities/Circle.ts","../../src/core/entities/Line.ts","../../src/core/entities/Rect.ts","../../src/adapters/renderers/rendering-manager.ts","../../src/adapters/storage/file-manager.ts","../../src/adapters/storage/memory-shapes-repository.ts","../../src/core/entities/Tool.ts","../../src/ui/tools/tool-circle.ts","../../src/ui/tools/tool-line.ts","../../src/ui/tools/tool-rect.ts","../../src/ui/tools/shape-selection-manager.ts","../../src/ui/tools/shape-drag-handler.ts","../../src/core/interfaces/shape-properties.ts","../../src/ui/tools/shape-properties-panel.ts","../../src/ui/tools/tool-select.ts","../../src/core/entities/commands/add-shape-command.ts","../../src/core/use-cases/add-shape.ts","../../src/core/entities/commands/change-fill-color-command.ts","../../src/core/entities/commands/change-stroke-color-command.ts","../../src/core/entities/commands/change-line-width-command.ts","../../src/core/entities/commands/change-dimensions-command.ts","../../src/core/use-cases/change-shape-property.ts","../../src/core/use-cases/history-manager.ts","../../src/core/entities/commands/move-shape-command.ts","../../src/core/use-cases/move-shape.ts","../../src/core/entities/commands/remove-shape-command.ts","../../src/core/use-cases/remove-shape.ts","../../src/core/use-cases/tool-manager.ts","../../src/ui/canvas-view.ts","../../src/ui/toolbar.ts","../../src/ui/layers-panel.ts","../../src/main.ts"],"sourcesContent":["import type { InputHandler } from \"../../core/interfaces/input-handler\";\n\ntype MouseDownCallback = (x: number, y: number) => void;\ntype MouseMoveCallback = (x: number, y: number) => void;\ntype MouseUpCallback = () => void;\n\ntype MouseEventType = \"mouseDown\" | \"mouseMove\" | \"mouseUp\";\n\nexport class CanvasInputHandler implements InputHandler {\n    private subscribers: {\n        mouseDown: MouseDownCallback[],\n        mouseMove: MouseMoveCallback[],\n        mouseUp: MouseUpCallback[]\n    } = {\n            mouseDown: [],\n            mouseMove: [],\n            mouseUp: []\n        };\n    private canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas\n        canvas.addEventListener(\"mousedown\", this.handleMouseDown);\n        document.addEventListener(\"mousemove\", this.handleMouseMove);\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n\n    subscribe(event: \"mouseDown\", callback: MouseDownCallback): void;\n    subscribe(event: \"mouseMove\", callback: MouseMoveCallback): void;\n    subscribe(event: \"mouseUp\", callback: MouseUpCallback): void;\n    subscribe(event: MouseEventType, callback: MouseDownCallback | MouseMoveCallback | MouseUpCallback): void {\n        if (event === \"mouseDown\") {\n            this.subscribers.mouseDown.push(callback as MouseDownCallback);\n        } else if (event === \"mouseMove\") {\n            this.subscribers.mouseMove.push(callback as MouseMoveCallback);\n        } else if (event === \"mouseUp\") {\n            this.subscribers.mouseUp.push(callback as MouseUpCallback);\n        }\n    }\n\n    unsubscribe(event: \"mouseDown\", callback: MouseDownCallback): void;\n    unsubscribe(event: \"mouseMove\", callback: MouseMoveCallback): void;\n    unsubscribe(event: \"mouseUp\", callback: MouseUpCallback): void;\n    unsubscribe(event: MouseEventType, callback: MouseDownCallback | MouseMoveCallback | MouseUpCallback): void {\n        if (event === \"mouseDown\") {\n            this.subscribers.mouseDown = this.subscribers.mouseDown.filter(cb => cb !== callback);\n        } else if (event === \"mouseMove\") {\n            this.subscribers.mouseMove = this.subscribers.mouseMove.filter(cb => cb !== callback);\n        } else if (event === \"mouseUp\") {\n            this.subscribers.mouseUp = this.subscribers.mouseUp.filter(cb => cb !== callback);\n        }\n    }\n\n    private handleMouseDown = (e: MouseEvent) => {\n        const { x, y } = this.getCanvasCoords(e);\n        this.subscribers.mouseDown.forEach(cb => cb(x, y));\n    };\n\n    private handleMouseMove = (e: MouseEvent) => {\n        const { x, y } = this.getCanvasCoords(e);\n        this.subscribers.mouseMove.forEach(cb => cb(x, y));\n    };\n\n    private handleMouseUp = () => {\n        this.subscribers.mouseUp.forEach(cb => cb());\n    };\n\n    private getCanvasCoords(e: MouseEvent) {\n        const rect = this.canvas.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        };\n    }\n}","import type { IRenderer } from \"../../core/interfaces/renderer\";\n\nexport class CanvasRenderer implements IRenderer {\n    private ctx: CanvasRenderingContext2D\n    constructor(ctx: CanvasRenderingContext2D) {\n        this.ctx = ctx\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, color: string, lineWidth: number): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.stroke();\n    }\n\n    drawRect(x: number, y: number, width: number, height: number, color: string, lineWidth: number, lineColor: string): void {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.strokeStyle = lineColor;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    drawCircle(x: number, y: number, radius: number, color: string, lineWidth: number, lineColor: string): void {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.strokeStyle = lineColor;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.arc(x, y, radius, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    clear(): void {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}","export abstract class Shape {\n    public id: string;\n    public x: number;\n    public y: number;\n    public color: string;\n    public lineWidth: number;\n    public abstract type: string;\n\n    abstract isPointInside(x: number, y: number): boolean;\n\n    constructor(id: string, x: number, y: number, color: string, lineWidth: number) {\n        this.id = id\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.lineWidth = lineWidth;\n    }\n\n    move(dx: number, dy: number): void {\n        this.x += dx;\n        this.y += dy;\n    }\n}","import type { WithLineColor, WithRadius } from \"../interfaces/shape-properties\";\nimport { Shape } from \"./Shape\";\n\nexport class Circle extends Shape implements WithRadius, WithLineColor {\n    public radius: number;\n    public lineColor: string;\n    public type: string = 'Circle';\n\n    constructor(id: string, x: number, y: number, radius: number, color: string, lineWidth: number, lineColor: string) {\n        super(id, x, y, color, lineWidth);\n        this.radius = radius;\n        this.lineColor = lineColor;\n    }\n\n    isPointInside(x: number, y: number): boolean {\n        const dx = x - this.x;\n        const dy = y - this.y;\n        return Math.sqrt(dx * dx + dy * dy) <= this.radius;\n    }\n}","import { Shape } from \"./Shape\";\n\nexport class Line extends Shape {\n    public x2: number\n    public y2: number\n    public type: string = 'Line';\n\n    constructor(id: string, x: number, y: number, x2: number, y2: number, color: string, lineWidth: number) {\n        super(id, x, y, color, lineWidth);\n        this.x2 = x2\n        this.y2 = y2\n    }\n\n    isPointInside(x: number, y: number): boolean {\n        const lineLength = Math.sqrt(Math.pow(this.x2 - this.x, 2) + Math.pow(this.y2 - this.y, 2));\n\n        if (lineLength === 0) {\n            return Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2)) <= this.lineWidth;\n        }\n\n        const distance = Math.abs(\n            (this.y2 - this.y) * x - (this.x2 - this.x) * y + this.x2 * this.y - this.y2 * this.x\n        ) / lineLength;\n\n        const dot1 = (x - this.x) * (this.x2 - this.x) + (y - this.y) * (this.y2 - this.y);\n        const dot2 = (x - this.x2) * (this.x - this.x2) + (y - this.y2) * (this.y - this.y2);\n\n        return distance <= this.lineWidth && dot1 >= 0 && dot2 >= 0;\n    }\n\n    move(dx: number, dy: number): void {\n        super.move(dx, dy);\n        this.x2 += dx;\n        this.y2 += dy;\n    }\n}","import type { WithDimensions, WithLineColor } from \"../interfaces/shape-properties\";\nimport { Shape } from \"./Shape\";\n\nexport class Rect extends Shape implements WithDimensions, WithLineColor {\n    public width: number;\n    public height: number;\n    public lineColor: string;\n    public type: string = 'Rect';\n\n    constructor(id: string, x: number, y: number, width: number, height: number, color: string, lineWidth: number, lineColor: string) {\n        super(id, x, y, color, lineWidth);\n        this.width = width;\n        this.height = height;\n        this.lineColor = lineColor\n    }\n\n    isPointInside(x: number, y: number): boolean {\n        return (\n            x >= this.x &&\n            x <= this.x + this.width &&\n            y >= this.y &&\n            y <= this.y + this.height\n        );\n    }\n}","import { Circle } from \"../../core/entities/Circle\";\nimport { Line } from \"../../core/entities/Line\";\nimport { Rect } from \"../../core/entities/Rect\";\nimport type { Shape } from \"../../core/entities/Shape\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\nimport type { CanvasRenderer } from \"./canvas-renderer\";\n\nexport class RenderingManager implements IRenderingManager {\n    private renderer: CanvasRenderer;\n    private shapes: Shape[] = [];\n    private temporaryShape: Shape | null = null;\n    private isRendering: boolean = false;\n    private _selectedShape: Shape | null = null;\n\n    constructor(renderer: CanvasRenderer) {\n        this.renderer = renderer;\n    }\n\n    get selectedShape(): Shape | null {\n        return this._selectedShape;\n    }\n\n    setShapes(shapes: Shape[]) {\n        this.shapes = shapes;\n    }\n\n    setTemporaryShape(shape: Shape | null) {\n        this.temporaryShape = shape;\n    }\n\n    setSelectedShape(shape: Shape | null): void {\n        this._selectedShape = shape;\n    }\n\n    startRendering(): void {\n        if (this.isRendering) return;\n\n        this.isRendering = true;\n        this.renderLoop();\n    }\n\n    stopRendering(): void {\n        this.isRendering = false;\n    }\n\n    private renderLoop(): void {\n        const renderFrame = () => {\n            this.render();\n\n            if (this.isRendering) {\n                requestAnimationFrame(renderFrame);\n            }\n        };\n\n        requestAnimationFrame(renderFrame);\n    }\n\n    private render() {\n        this.renderer.clear();\n\n        this.shapes.forEach(shape => {\n            if (shape instanceof Rect) {\n                this.renderer.drawRect(\n                    shape.x, shape.y, shape.width, shape.height,\n                    shape.color, shape.lineWidth, shape.lineColor\n                );\n            } else if (shape instanceof Line) {\n                this.renderer.drawLine(\n                    shape.x, shape.y, shape.x2, shape.y2,\n                    shape.color, shape.lineWidth\n                );\n            } else if (shape instanceof Circle) {\n                this.renderer.drawCircle(\n                    shape.x, shape.y, shape.radius,\n                    shape.color, shape.lineWidth, shape.lineColor\n                );\n            }\n        });\n\n        if (this.temporaryShape) {\n            if (this.temporaryShape instanceof Rect) {\n                this.renderer.drawRect(\n                    this.temporaryShape.x, this.temporaryShape.y,\n                    this.temporaryShape.width, this.temporaryShape.height,\n                    this.temporaryShape.color, this.temporaryShape.lineWidth,\n                    this.temporaryShape.lineColor\n                );\n            } else if (this.temporaryShape instanceof Line) {\n                this.renderer.drawLine(\n                    this.temporaryShape.x, this.temporaryShape.y, this.temporaryShape.x2, this.temporaryShape.y2,\n                    this.temporaryShape.color, this.temporaryShape.lineWidth\n                );\n            } else if (this.temporaryShape instanceof Circle) {\n                this.renderer.drawCircle(\n                    this.temporaryShape.x, this.temporaryShape.y, this.temporaryShape.radius,\n                    this.temporaryShape.color, this.temporaryShape.lineWidth, this.temporaryShape.lineColor\n                );\n            }\n        }\n\n        if (this._selectedShape) {\n            this.drawSelectionForShape(this._selectedShape);\n        }\n    }\n\n    private drawSelectionForShape(shape: Shape): void {\n        if (shape instanceof Rect) {\n            this.renderer.drawRect(\n                shape.x - 2,\n                shape.y - 2,\n                shape.width + 4,\n                shape.height + 4,\n                'transparent',\n                2,\n                '#00A0FF'\n            );\n\n        } else if (shape instanceof Line) {\n            this.renderer.drawLine(shape.x, shape.y, shape.x2, shape.y2, '#00A0FF', 2);\n        } else if (shape instanceof Circle) {\n            this.renderer.drawCircle(\n                shape.x, shape.y, shape.radius + 2,\n                'transparent', 2, '#00A0FF'\n            );\n        }\n    }\n}","import { Shape } from \"../../core/entities/Shape\";\nimport { Rect } from \"../../core/entities/Rect\";\nimport { Line } from \"../../core/entities/Line\";\nimport { Circle } from \"../../core/entities/Circle\";\nimport type { ShapesRepository } from \"../../core/interfaces/shapes-repository\";\nimport type { IHistoryManager } from \"../../core/interfaces/history-manager\";\nimport type { RenderingManager } from \"../renderers/rendering-manager\";\nimport type { IToolManager } from \"../../core/interfaces/tool-manager\";\n\nexport interface ProjectData {\n    version: string;\n    canvasWidth: number;\n    canvasHeight: number;\n    shapes: Shape[];\n    timestamp: string;\n}\n\nexport class FileManager {\n    private canvas: HTMLCanvasElement;\n    private repo: ShapesRepository;\n    private historyManager: IHistoryManager;\n    private renderingManager: RenderingManager;\n    private fileInput: HTMLInputElement;\n    private toolManager: IToolManager;\n\n    constructor(\n        canvas: HTMLCanvasElement,\n        repo: ShapesRepository,\n        historyManager: IHistoryManager,\n        renderingManager: RenderingManager,\n        toolManager: IToolManager\n    ) {\n        this.canvas = canvas;\n        this.repo = repo;\n        this.historyManager = historyManager;\n        this.renderingManager = renderingManager;\n        this.toolManager = toolManager;\n\n        this.fileInput = document.createElement('input');\n        this.fileInput.type = 'file';\n        this.fileInput.accept = '.json';\n        this.fileInput.style.display = 'none';\n        document.body.appendChild(this.fileInput);\n\n        this.fileInput.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            if (target.files && target.files.length > 0) {\n                this.importFromJSON(target.files[0]);\n            }\n        });\n\n        this.setupEventListeners();\n    }\n\n    private setupEventListeners(): void {\n        const exportPngButton = document.getElementById('export-png');\n        if (exportPngButton) {\n            exportPngButton.addEventListener('click', () => this.exportToPNG());\n        }\n\n        const exportJsonButton = document.getElementById('export-json');\n        if (exportJsonButton) {\n            exportJsonButton.addEventListener('click', () => this.exportToJSON());\n        }\n\n        const importJsonButton = document.getElementById('import-json');\n        if (importJsonButton) {\n            importJsonButton.addEventListener('click', () => {\n                this.fileInput.click();\n            });\n        }\n    }\n\n    private showToast(message: string, isError = false): void {\n        const toast = document.createElement('div');\n        toast.className = `toast-message ${isError ? 'error' : ''}`;\n        toast.textContent = message;\n\n        document.body.appendChild(toast);\n\n        setTimeout(() => {\n            document.body.removeChild(toast);\n        }, 3000);\n    }\n\n    public exportToPNG(): void {\n        try {\n            const dataURL = this.canvas.toDataURL('image/png');\n\n            const downloadLink = document.createElement('a');\n\n            const date = new Date();\n            const fileName = `canvas_${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}_${date.getHours()}-${date.getMinutes()}.png`;\n\n            downloadLink.href = dataURL;\n            downloadLink.download = fileName;\n            downloadLink.style.display = 'none';\n\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n\n            setTimeout(() => {\n                document.body.removeChild(downloadLink);\n            }, 100);\n\n            this.showToast('Изображение успешно экспортировано');\n\n        } catch (error) {\n            console.error('Ошибка при экспорте изображения:', error);\n            this.showToast('Ошибка при экспорте изображения', true);\n        }\n    }\n\n    public exportToJSON(): void {\n        try {\n            const shapes = this.repo.getAll();\n\n            const projectData: ProjectData = {\n                version: '1.0',\n                canvasWidth: this.canvas.width,\n                canvasHeight: this.canvas.height,\n                shapes: shapes,\n                timestamp: new Date().toISOString()\n            };\n\n            const jsonString = JSON.stringify(projectData, null, 2);\n\n            const blob = new Blob([jsonString], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n\n            const downloadLink = document.createElement('a');\n            const date = new Date();\n            const fileName = `shapedraw_${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}_${date.getHours()}-${date.getMinutes()}.json`;\n\n            downloadLink.href = url;\n            downloadLink.download = fileName;\n            downloadLink.style.display = 'none';\n\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n\n            setTimeout(() => {\n                document.body.removeChild(downloadLink);\n                URL.revokeObjectURL(url);\n            }, 100);\n\n            this.showToast('Проект успешно сохранен');\n\n        } catch (error) {\n            console.error('Ошибка при экспорте в JSON:', error);\n            this.showToast('Не удалось сохранить проект', true);\n        }\n    }\n\n    private createShapeFromData(shapeData: any): Shape | null {\n        try {\n            switch (shapeData.type) {\n                case 'Rect':\n                    return new Rect(\n                        shapeData.id,\n                        shapeData.x || 0,\n                        shapeData.y || 0,\n                        shapeData.width || 0,\n                        shapeData.height || 0,\n                        shapeData.color || '#ffffff',\n                        shapeData.lineWidth || 1,\n                        shapeData.lineColor || '#000000'\n                    );\n                case 'Line':\n                    return new Line(\n                        shapeData.id,\n                        shapeData.x || 0,\n                        shapeData.y || 0,\n                        shapeData.x2 || 0,\n                        shapeData.y2 || 0,\n                        shapeData.color || '#000000',\n                        shapeData.lineWidth || 1\n                    );\n                case 'Circle':\n                    return new Circle(\n                        shapeData.id,\n                        shapeData.x || 0,\n                        shapeData.y || 0,\n                        shapeData.radius || 0,\n                        shapeData.color || '#ffffff',\n                        shapeData.lineWidth || 1,\n                        shapeData.lineColor || '#000000'\n                    );\n                default:\n                    console.warn(`Неизвестный тип фигуры: ${shapeData.type}`);\n                    return null;\n            }\n        } catch (error) {\n            console.error('Ошибка при создании фигуры из данных:', error);\n            return null;\n        }\n    }\n\n    private importFromJSON(file: File): void {\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            try {\n                if (!event.target || typeof event.target.result !== 'string') {\n                    throw new Error('Не удалось прочитать файл');\n                }\n\n                const projectData = JSON.parse(event.target.result) as ProjectData;\n\n                if (!projectData.version) {\n                    throw new Error('Некорректный формат файла проекта');\n                }\n\n                const currentShapes = [...this.repo.getAll()];\n                currentShapes.forEach(shape => {\n                    this.repo.remove(shape.id);\n                });\n\n                if (projectData.canvasWidth && projectData.canvasHeight) {\n                    this.canvas.width = projectData.canvasWidth;\n                    this.canvas.height = projectData.canvasHeight;\n                }\n\n                if (Array.isArray(projectData.shapes)) {\n                    projectData.shapes.forEach(shapeData => {\n                        if (shapeData && typeof shapeData === 'object' && 'type' in shapeData) {\n                            const shape = this.createShapeFromData(shapeData as any);\n                            if (shape) {\n                                this.repo.add(shape);\n                            }\n                        } else {\n                            console.warn('Пропущена фигура без свойства type:', shapeData);\n                        }\n                    });\n                }\n\n                this.historyManager.clear();\n\n                this.renderingManager.setShapes(this.repo.getAll());\n\n                this.toolManager.setActiveTool(\"Select\");\n\n                this.showToast(`Проект успешно загружен (${projectData.shapes?.length || 0} фигур)`);\n\n            } catch (error) {\n                console.error('Ошибка при импорте из JSON:', error);\n                this.showToast('Не удалось импортировать проект', true);\n            }\n        };\n\n        reader.onerror = () => {\n            console.error('Ошибка при чтении файла');\n            this.showToast('Не удалось прочитать файл', true);\n        };\n\n        reader.readAsText(file);\n    }\n} ","import type { Shape } from \"../../core/entities/Shape\";\nimport type { ShapesRepository } from \"../../core/interfaces/shapes-repository\";\n\nexport class MemoryShapesRepository implements ShapesRepository {\n    private shapes: Map<string, Shape> = new Map();\n    private subscribers: (() => void)[] = [];\n\n    subscribe(callback: () => void): void {\n        this.subscribers.push(callback);\n    }\n\n    notify(): void {\n        this.subscribers.forEach(cb => cb());\n    }\n\n    add(shape: Shape): void {\n        this.shapes.set(shape.id, shape);\n        this.notify();\n    }\n\n    remove(id: string): void {\n        this.shapes.delete(id);\n        this.notify();\n    }\n\n    get(id: string): Shape | null {\n        return this.shapes.get(id) || null;\n    }\n\n    getAll(): Shape[] {\n        return Array.from(this.shapes.values());\n    }\n\n    findByPoint(x: number, y: number): Shape | null {\n        for (const shape of this.shapes.values()) {\n            if (shape.isPointInside(x, y)) {\n                return shape;\n            }\n        }\n        return null;\n    }\n}\n","import type { CanvasInputHandler } from \"../../adapters/input/canvas-input-handler\";\nimport type { IRenderingManager } from \"../interfaces/rendering-manager\";\nimport type { AddShape } from \"../use-cases/add-shape\";\n\nexport abstract class Tool {\n    protected canvasInput: CanvasInputHandler\n    protected addShape: AddShape\n    protected renderingManager: IRenderingManager\n    constructor(\n        canvasInput: CanvasInputHandler,\n        addShape: AddShape,\n        renderingManager: IRenderingManager\n    ) {\n        this.canvasInput = canvasInput;\n        this.addShape = addShape;\n        this.renderingManager = renderingManager\n    }\n\n    abstract activate(): void;\n    abstract deactivate(): void;\n}","import type { CanvasInputHandler } from \"../../adapters/input/canvas-input-handler\";\nimport type { AddShape } from \"../../core/use-cases/add-shape\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\nimport { Tool } from \"../../core/entities/Tool\";\nimport { Circle } from \"../../core/entities/Circle\";\n\nexport class ToolCircle extends Tool {\n    private startX = 0;\n    private startY = 0;\n    private currentCircle: Circle | null = null;\n\n    constructor(\n        canvasInput: CanvasInputHandler,\n        addShape: AddShape,\n        renderingManager: IRenderingManager\n    ) {\n        super(canvasInput, addShape, renderingManager);\n    }\n\n    activate(): void {\n        document.body.style.cursor = 'crosshair';\n\n        this.canvasInput.subscribe(\"mouseDown\", this.handleMouseDown);\n    }\n\n    deactivate(): void {\n        document.body.style.cursor = 'default';\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDown);\n        this.canvasInput.unsubscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.unsubscribe(\"mouseUp\", this.handleMouseUp);\n\n        if (this.renderingManager) {\n            this.renderingManager.setTemporaryShape(null);\n        }\n        this.currentCircle = null;\n    }\n\n    private handleMouseDown = (x: number, y: number): void => {\n        this.startX = x;\n        this.startY = y;\n        const idGenerator = () => `shape-${Math.random().toString(36).slice(2, 9)}`;\n\n        this.currentCircle = new Circle(\n            idGenerator(), x, y, 1, \"#000000\", 2, \"#FFFFFF\"\n        );\n\n        this.renderingManager.setTemporaryShape(this.currentCircle);\n\n        this.canvasInput.subscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.subscribe(\"mouseUp\", this.handleMouseUp);\n    };\n\n    private handleMouseMove = (x: number, y: number): void => {\n        if (!this.currentCircle) return;\n\n        const distance = Math.sqrt(Math.pow(x - this.startX, 2) + Math.pow(y - this.startY, 2));\n        this.currentCircle.radius = distance;\n\n        this.renderingManager.setTemporaryShape(this.currentCircle);\n    };\n\n    private handleMouseUp = (): void => {\n        if (!this.currentCircle) return;\n\n        if (Math.abs(this.currentCircle.radius) < 1) {\n            this.currentCircle.radius = 2;\n        }\n\n        this.addShape.execute(this.currentCircle);\n\n        this.renderingManager.setTemporaryShape(null);\n        this.currentCircle = null;\n    };\n}","import type { CanvasInputHandler } from \"../../adapters/input/canvas-input-handler\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\nimport type { AddShape } from \"../../core/use-cases/add-shape\";\nimport { Line } from \"../../core/entities/Line\";\nimport { Tool } from \"../../core/entities/Tool\";\n\nexport class ToolLine extends Tool {\n    private currentLine: Line | null = null;\n    private twoPoint: Boolean = false\n\n    constructor(\n        canvasInput: CanvasInputHandler,\n        addShape: AddShape,\n        renderingManager: IRenderingManager\n    ) {\n        super(canvasInput, addShape, renderingManager);\n    }\n\n    activate(): void {\n        document.body.style.cursor = 'crosshair';\n        this.canvasInput.subscribe(\"mouseDown\", this.handleMouseDown);\n    }\n\n    deactivate(): void {\n        document.body.style.cursor = 'default';\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDown);\n        this.canvasInput.unsubscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDownTwoPoint);\n\n        if (this.renderingManager) {\n            this.renderingManager.setTemporaryShape(null);\n        }\n        this.currentLine = null;\n    }\n\n    private handleMouseDown = (x: number, y: number): void => {\n        if (this.twoPoint) return\n        this.twoPoint = true\n        const idGenerator = () => `shape-${Math.random().toString(36).slice(2, 9)}`;\n\n        this.currentLine = new Line(\n            idGenerator(), x, y, 0, 0, \"#000000\", 2\n        );\n\n        this.canvasInput.subscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.subscribe(\"mouseDown\", this.handleMouseDownTwoPoint);\n    };\n\n    private handleMouseMove = (x: number, y: number) => {\n        if (!this.currentLine) return;\n\n        this.currentLine.x2 = x\n        this.currentLine.y2 = y\n        this.renderingManager.setTemporaryShape(this.currentLine);\n\n    }\n\n    private handleMouseDownTwoPoint = (): void => {\n        if (!this.currentLine) return;\n\n        this.addShape.execute(this.currentLine);\n        this.renderingManager.setTemporaryShape(null);\n\n        this.canvasInput.unsubscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDownTwoPoint);\n\n        this.currentLine = null;\n        this.twoPoint = false\n    }\n} ","import type { CanvasInputHandler } from \"../../adapters/input/canvas-input-handler\";\nimport type { AddShape } from \"../../core/use-cases/add-shape\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\nimport { Rect } from \"../../core/entities/Rect\";\nimport { Tool } from \"../../core/entities/Tool\";\n\nexport class ToolRect extends Tool {\n    private startX = 0;\n    private startY = 0;\n    private currentRect: Rect | null = null;\n\n    constructor(\n        canvasInput: CanvasInputHandler,\n        addShape: AddShape,\n        renderingManager: IRenderingManager\n    ) {\n        super(canvasInput, addShape, renderingManager);\n    }\n\n    activate(): void {\n        document.body.style.cursor = 'crosshair';\n\n        this.canvasInput.subscribe(\"mouseDown\", this.handleMouseDown);\n    }\n\n    deactivate(): void {\n        document.body.style.cursor = 'default';\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDown);\n        this.canvasInput.unsubscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.unsubscribe(\"mouseUp\", this.handleMouseUp);\n\n        if (this.renderingManager) {\n            this.renderingManager.setTemporaryShape(null);\n        }\n        this.currentRect = null;\n    }\n\n    private handleMouseDown = (x: number, y: number): void => {\n        this.startX = x;\n        this.startY = y;\n        const idGenerator = () => `shape-${Math.random().toString(36).slice(2, 9)}`;\n\n        this.currentRect = new Rect(\n            idGenerator(), x, y, 0, 0, \"#000000\", 2, \"#FFFFFF\"\n        );\n\n        this.renderingManager.setTemporaryShape(this.currentRect);\n\n        this.canvasInput.subscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.subscribe(\"mouseUp\", this.handleMouseUp);\n    };\n\n    private handleMouseMove = (x: number, y: number): void => {\n        if (!this.currentRect) return;\n\n        this.currentRect.width = x - this.startX;\n        this.currentRect.height = y - this.startY;\n\n        this.renderingManager.setTemporaryShape(this.currentRect);\n    };\n\n    private handleMouseUp = (): void => {\n        if (!this.currentRect) return;\n\n        if (Math.abs(this.currentRect.width) < 5 || Math.abs(this.currentRect.height) < 5) {\n            this.currentRect.width = 100;\n            this.currentRect.height = 80;\n        }\n\n        this.addShape.execute(this.currentRect);\n\n        this.renderingManager.setTemporaryShape(null);\n        this.currentRect = null;\n    };\n}","import type { Shape } from \"../../core/entities/Shape\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\n\nexport class ShapeSelectionManager {\n    private selectedShape: Shape | null = null;\n    private renderingManager: IRenderingManager;\n\n    constructor(renderingManager: IRenderingManager) {\n        this.renderingManager = renderingManager;\n    }\n\n    selectShape(shape: Shape): void {\n        this.selectedShape = shape;\n        this.renderingManager.setSelectedShape(shape);\n    }\n\n    clearSelection(): void {\n        this.selectedShape = null;\n        this.renderingManager.setSelectedShape(null);\n    }\n\n    getSelectedShape(): Shape | null {\n        return this.selectedShape;\n    }\n}","import type { Shape } from \"../../core/entities/Shape\";\nimport type { MoveShape } from \"../../core/use-cases/move-shape\";\n\nexport class ShapeDragHandler {\n    private isDragging: boolean = false;\n    private dragOffsetX: number = 0;\n    private dragOffsetY: number = 0;\n    private startX: number = 0;\n    private startY: number = 0;\n    private moveShape: MoveShape;\n\n    constructor(moveShape: MoveShape) {\n        this.moveShape = moveShape;\n    }\n\n    startDrag(shape: Shape, x: number, y: number): void {\n        this.isDragging = true;\n        this.dragOffsetX = x - shape.x;\n        this.dragOffsetY = y - shape.y;\n        this.startX = shape.x;\n        this.startY = shape.y;\n    }\n\n    drag(shape: Shape, x: number, y: number): void {\n        if (!this.isDragging) return;\n\n        const newX = x - this.dragOffsetX;\n        const newY = y - this.dragOffsetY;\n\n        const dx = newX - shape.x;\n        const dy = newY - shape.y;\n\n        shape.move(dx, dy);\n    }\n\n    endDrag(shape: Shape): void {\n        if (!this.isDragging) return;\n\n        const dx = shape.x - this.startX;\n        const dy = shape.y - this.startY;\n\n        if (dx !== 0 || dy !== 0) {\n            shape.move(-dx, -dy);\n\n            this.moveShape.execute(shape, dx, dy);\n        }\n\n        this.isDragging = false;\n    }\n\n    isDraggingActive(): boolean {\n        return this.isDragging;\n    }\n}","export interface WithLineColor {\n    lineColor: string;\n}\n\nexport interface WithDimensions {\n    width: number;\n    height: number;\n}\n\nexport interface WithRadius {\n    radius: number;\n}\n\nexport type ShapeProperty = object;\n\nexport function hasLineColor(obj: ShapeProperty): obj is WithLineColor {\n    return obj && typeof obj === 'object' && 'lineColor' in obj;\n}\n\nexport function hasDimensions(obj: ShapeProperty): obj is WithDimensions {\n    return obj && typeof obj === 'object' && 'width' in obj && 'height' in obj;\n}\n\nexport function hasRadius(obj: ShapeProperty): obj is WithRadius {\n    return obj && typeof obj === 'object' && 'radius' in obj;\n} ","import type { Shape } from \"../../core/entities/Shape\";\nimport type { ChangeShapeProperty } from \"../../core/use-cases/change-shape-property\";\nimport { hasLineColor, hasDimensions, hasRadius } from \"../../core/interfaces/shape-properties\";\nimport type { WithLineColor, WithDimensions, WithRadius, ShapeProperty } from \"../../core/interfaces/shape-properties\";\nimport { Line } from \"../../core/entities/Line\";\nimport type { ShapeSelectionManager } from \"./shape-selection-manager\";\n\nexport class ShapePropertiesPanel {\n    private changeShapeProperty: ChangeShapeProperty;\n    private selectionManager: ShapeSelectionManager | null = null;\n    private decimalPlaces: number = 1;\n\n    constructor(changeShapeProperty: ChangeShapeProperty) {\n        this.changeShapeProperty = changeShapeProperty;\n        this.setupControls();\n    }\n\n    setSelectionManager(selectionManager: ShapeSelectionManager): void {\n        this.selectionManager = selectionManager;\n    }\n\n    setDecimalPlaces(places: number): void {\n        this.decimalPlaces = places;\n    }\n\n    setupControls(): void {\n        const fillColorPicker = document.getElementById('fill-color') as HTMLInputElement;\n        const strokeColorPicker = document.getElementById('stroke-color') as HTMLInputElement;\n        const strokeWidthSlider = document.getElementById('stroke-width') as HTMLInputElement;\n        const widthInput = document.getElementById('width-input') as HTMLInputElement;\n        const heightInput = document.getElementById('height-input') as HTMLInputElement;\n\n        if (fillColorPicker) {\n            fillColorPicker.addEventListener('input', () => {\n                const shape = this.getSelectedShape();\n                if (shape) this.handleFillColorChange(shape, fillColorPicker.value);\n            });\n        }\n\n        if (strokeColorPicker) {\n            strokeColorPicker.addEventListener('input', () => {\n                const shape = this.getSelectedShape();\n                if (shape) this.handleStrokeColorChange(shape, strokeColorPicker.value);\n            });\n        }\n\n        if (strokeWidthSlider) {\n            strokeWidthSlider.addEventListener('input', () => {\n                const shape = this.getSelectedShape();\n                if (shape) this.handleLineWidthChange(shape, parseInt(strokeWidthSlider.value));\n            });\n        }\n\n        if (widthInput) {\n            widthInput.addEventListener('change', () => {\n                const shape = this.getSelectedShape();\n                if (shape) this.handleWidthChange(shape, parseFloat(widthInput.value));\n            });\n        }\n\n        if (heightInput) {\n            heightInput.addEventListener('change', () => {\n                const shape = this.getSelectedShape();\n                if (shape) this.handleHeightChange(shape, parseFloat(heightInput.value));\n            });\n        }\n    }\n\n    updateControls(shape: Shape | null): void {\n        if (!shape) {\n            this.resetControls();\n            return;\n        }\n\n        const fillColorPicker = document.getElementById('fill-color') as HTMLInputElement;\n        const strokeColorPicker = document.getElementById('stroke-color') as HTMLInputElement;\n        const strokeWidthSlider = document.getElementById('stroke-width') as HTMLInputElement;\n        const widthInput = document.getElementById('width-input') as HTMLInputElement;\n        const heightInput = document.getElementById('height-input') as HTMLInputElement;\n\n        if (fillColorPicker) {\n            fillColorPicker.value = shape.color;\n        }\n\n        if (strokeColorPicker && hasLineColor(shape as ShapeProperty)) {\n            const shapeWithLine = shape as unknown as WithLineColor;\n            strokeColorPicker.value = shapeWithLine.lineColor;\n        } else if (strokeColorPicker && shape instanceof Line) {\n            strokeColorPicker.value = shape.color;\n        }\n\n        if (strokeWidthSlider) {\n            strokeWidthSlider.value = this.formatNumber(shape.lineWidth);\n        }\n\n        if (widthInput) {\n            if (hasDimensions(shape as ShapeProperty)) {\n                const shapeWithDimensions = shape as unknown as WithDimensions;\n                widthInput.value = this.formatNumber(shapeWithDimensions.width);\n            } else if (shape instanceof Line) {\n                const width = Math.abs(shape.x2 - shape.x);\n                widthInput.value = this.formatNumber(width);\n            } else if (hasRadius(shape as ShapeProperty)) {\n                const shapeWithRadius = shape as unknown as WithRadius;\n                widthInput.value = this.formatNumber(shapeWithRadius.radius * 2);\n            }\n        }\n\n        if (heightInput) {\n            if (hasDimensions(shape as ShapeProperty)) {\n                const shapeWithDimensions = shape as unknown as WithDimensions;\n                heightInput.value = this.formatNumber(shapeWithDimensions.height);\n            } else if (shape instanceof Line) {\n                const height = Math.abs(shape.y2 - shape.y);\n                heightInput.value = this.formatNumber(height);\n            } else if (hasRadius(shape as ShapeProperty)) {\n                const shapeWithRadius = shape as unknown as WithRadius;\n                heightInput.value = this.formatNumber(shapeWithRadius.radius * 2);\n            }\n        }\n    }\n\n    private resetControls(): void {\n        const fillColorPicker = document.getElementById('fill-color') as HTMLInputElement;\n        const strokeColorPicker = document.getElementById('stroke-color') as HTMLInputElement;\n        const strokeWidthSlider = document.getElementById('stroke-width') as HTMLInputElement;\n        const widthInput = document.getElementById('width-input') as HTMLInputElement;\n        const heightInput = document.getElementById('height-input') as HTMLInputElement;\n\n        if (fillColorPicker) fillColorPicker.value = \"#000000\";\n        if (strokeColorPicker) strokeColorPicker.value = \"#000000\";\n        if (strokeWidthSlider) strokeWidthSlider.value = \"2\";\n        if (widthInput) widthInput.value = \"\";\n        if (heightInput) heightInput.value = \"\";\n    }\n\n    handleFillColorChange(shape: Shape, color: string): void {\n        this.changeShapeProperty.changeFillColor(shape, color);\n    }\n\n    handleStrokeColorChange(shape: Shape, color: string): void {\n        this.changeShapeProperty.changeStrokeColor(shape, color);\n    }\n\n    handleLineWidthChange(shape: Shape, width: number): void {\n        this.changeShapeProperty.changeLineWidth(shape, width);\n    }\n\n    handleWidthChange(shape: Shape, width: number): void {\n        if (shape instanceof Line) {\n            const height = Math.abs(shape.y2 - shape.y);\n            this.changeShapeProperty.changeDimensions(shape, width, height);\n        } else {\n            const height = hasDimensions(shape as ShapeProperty)\n                ? (shape as unknown as WithDimensions).height\n                : hasRadius(shape as ShapeProperty)\n                    ? (shape as unknown as WithRadius).radius * 2\n                    : 0;\n\n            this.changeShapeProperty.changeDimensions(shape, width, height);\n        }\n    }\n\n    handleHeightChange(shape: Shape, height: number): void {\n        if (shape instanceof Line) {\n            const width = Math.abs(shape.x2 - shape.x);\n            this.changeShapeProperty.changeDimensions(shape, width, height);\n        } else {\n            const width = hasDimensions(shape as ShapeProperty)\n                ? (shape as unknown as WithDimensions).width\n                : hasRadius(shape as ShapeProperty)\n                    ? (shape as unknown as WithRadius).radius * 2\n                    : 0;\n\n            this.changeShapeProperty.changeDimensions(shape, width, height);\n        }\n    }\n\n    private getSelectedShape(): Shape | null {\n        if (this.selectionManager) {\n            return this.selectionManager.getSelectedShape();\n        }\n        return null;\n    }\n\n    private formatNumber(value: number): string {\n        if (this.decimalPlaces <= 0) {\n            return Math.round(value).toString();\n        }\n        return value.toFixed(this.decimalPlaces);\n    }\n}","import type { CanvasInputHandler } from \"../../adapters/input/canvas-input-handler\";\nimport type { IRenderingManager } from \"../../core/interfaces/rendering-manager\";\nimport type { ShapesRepository } from \"../../core/interfaces/shapes-repository\";\nimport type { AddShape } from \"../../core/use-cases/add-shape\";\nimport type { ChangeShapeProperty } from \"../../core/use-cases/change-shape-property\";\nimport type { MoveShape } from \"../../core/use-cases/move-shape\";\nimport type { RemoveShape } from \"../../core/use-cases/remove-shape\";\nimport { Tool } from \"../../core/entities/Tool\";\nimport { ShapeSelectionManager } from \"./shape-selection-manager\";\nimport { ShapeDragHandler } from \"./shape-drag-handler\";\nimport { ShapePropertiesPanel } from \"./shape-properties-panel\";\n\nexport class ToolSelect extends Tool {\n    private shapesRepo: ShapesRepository;\n    private selectionManager: ShapeSelectionManager;\n    private dragHandler: ShapeDragHandler;\n    private propertiesPanel: ShapePropertiesPanel;\n    private removeShape: RemoveShape;\n    private keydownHandler: (event: KeyboardEvent) => void;\n\n    constructor(\n        canvasInput: CanvasInputHandler,\n        addShape: AddShape,\n        shapesRepo: ShapesRepository,\n        renderingManager: IRenderingManager,\n        moveShape: MoveShape,\n        changeShapeProperty: ChangeShapeProperty,\n        removeShape: RemoveShape\n    ) {\n        super(canvasInput, addShape, renderingManager);\n        this.shapesRepo = shapesRepo;\n        this.removeShape = removeShape;\n\n        this.selectionManager = new ShapeSelectionManager(renderingManager);\n        this.dragHandler = new ShapeDragHandler(moveShape);\n        this.propertiesPanel = new ShapePropertiesPanel(changeShapeProperty);\n\n        this.propertiesPanel.setSelectionManager(this.selectionManager);\n\n        this.keydownHandler = this.handleKeyDown.bind(this);\n    }\n\n    activate(): void {\n        this.canvasInput.subscribe(\"mouseDown\", this.handleMouseDown);\n        document.addEventListener('keydown', this.keydownHandler);\n    }\n\n    deactivate(): void {\n        this.canvasInput.unsubscribe(\"mouseDown\", this.handleMouseDown);\n        this.selectionManager.clearSelection();\n        document.removeEventListener('keydown', this.keydownHandler);\n    }\n\n    private handleKeyDown(event: KeyboardEvent): void {\n        if (event.key === 'Delete' || event.keyCode === 46) {\n            const selectedShape = this.selectionManager.getSelectedShape();\n            if (selectedShape) {\n                this.removeShape.execute(selectedShape);\n                this.selectionManager.clearSelection();\n                this.propertiesPanel.updateControls(null);\n            }\n        }\n    }\n\n    private handleMouseDown = (x: number, y: number): void => {\n        const selectedShape = this.selectionManager.getSelectedShape();\n\n        if (selectedShape && selectedShape.isPointInside(x, y)) {\n            this.dragHandler.startDrag(selectedShape, x, y);\n\n            this.canvasInput.subscribe(\"mouseMove\", this.handleMouseMove);\n            this.canvasInput.subscribe(\"mouseUp\", this.handleMouseUp);\n\n            document.getElementById('canvas')!.style.cursor = 'move';\n            return;\n        }\n\n        this.selectionManager.clearSelection();\n\n        const shapes = this.shapesRepo.getAll();\n        for (let i = shapes.length - 1; i >= 0; i--) {\n            const shape = shapes[i];\n            if (shape.isPointInside(x, y)) {\n                this.selectionManager.selectShape(shape);\n                this.propertiesPanel.updateControls(shape);\n                break;\n            }\n        }\n    };\n\n    private handleMouseMove = (x: number, y: number): void => {\n        const selectedShape = this.selectionManager.getSelectedShape();\n        if (!selectedShape) return;\n\n        this.dragHandler.drag(selectedShape, x, y);\n        this.renderingManager.setSelectedShape(selectedShape);\n    };\n\n    private handleMouseUp = (): void => {\n        const selectedShape = this.selectionManager.getSelectedShape();\n        if (selectedShape) {\n            this.dragHandler.endDrag(selectedShape);\n        }\n\n        document.getElementById('canvas')!.style.cursor = 'default';\n\n        this.canvasInput.unsubscribe(\"mouseMove\", this.handleMouseMove);\n        this.canvasInput.unsubscribe(\"mouseUp\", this.handleMouseUp);\n    };\n}","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\n\nexport class AddShapeCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n\n    constructor(shape: Shape, repository: ShapesRepository) {\n        this.shape = shape;\n        this.repository = repository;\n    }\n\n    execute(): void {\n        this.repository.add(this.shape);\n    }\n\n    undo(): void {\n        this.repository.remove(this.shape.id);\n    }\n} ","import type { Shape } from \"../entities/Shape\";\nimport type { ShapesRepository } from \"../interfaces/shapes-repository\";\nimport { AddShapeCommand } from \"../entities/commands/add-shape-command\";\nimport type { HistoryManager } from \"./history-manager\";\n\nexport class AddShape {\n    private shapesRepository: ShapesRepository;\n    private historyManager: HistoryManager;\n\n    constructor(shapesRepository: ShapesRepository, historyManager: HistoryManager) {\n        this.shapesRepository = shapesRepository;\n        this.historyManager = historyManager;\n    }\n\n    execute(shape: Shape) {\n        const command = new AddShapeCommand(shape, this.shapesRepository);\n        this.historyManager.execute(command);\n    }\n}","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\n\nexport class ChangeFillColorCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n    private oldColor: string;\n    private newColor: string;\n\n    constructor(shape: Shape, repository: ShapesRepository, newColor: string) {\n        this.shape = shape;\n        this.repository = repository;\n        this.oldColor = shape.color;\n        this.newColor = newColor;\n    }\n\n    execute(): void {\n        this.shape.color = this.newColor;\n        this.repository.notify();\n    }\n\n    undo(): void {\n        this.shape.color = this.oldColor;\n        this.repository.notify();\n    }\n} ","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\nimport type { WithLineColor } from \"../../interfaces/shape-properties\";\nimport { hasLineColor } from \"../../interfaces/shape-properties\";\nimport { Line } from \"../Line\";\n\nexport class ChangeStrokeColorCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n    private oldColor: string;\n    private newColor: string;\n    private isLine: boolean;\n\n    constructor(shape: Shape, repository: ShapesRepository, newColor: string) {\n        this.shape = shape;\n        this.repository = repository;\n        this.isLine = shape instanceof Line;\n\n        if (this.isLine) {\n            this.oldColor = (shape as Line).color;\n        } else if (hasLineColor(shape as any)) {\n            this.oldColor = (shape as unknown as WithLineColor).lineColor;\n        } else {\n            this.oldColor = '';\n        }\n\n        this.newColor = newColor;\n    }\n\n    execute(): void {\n        if (this.isLine) {\n            (this.shape as Line).color = this.newColor;\n        } else if (hasLineColor(this.shape as any)) {\n            (this.shape as unknown as WithLineColor).lineColor = this.newColor;\n        }\n        this.repository.notify();\n    }\n\n    undo(): void {\n        if (this.isLine) {\n            (this.shape as Line).color = this.oldColor;\n        } else if (hasLineColor(this.shape as any)) {\n            (this.shape as unknown as WithLineColor).lineColor = this.oldColor;\n        }\n        this.repository.notify();\n    }\n} ","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\n\nexport class ChangeLineWidthCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n    private oldWidth: number;\n    private newWidth: number;\n\n    constructor(shape: Shape, repository: ShapesRepository, newWidth: number) {\n        this.shape = shape;\n        this.repository = repository;\n        this.oldWidth = shape.lineWidth;\n        this.newWidth = newWidth;\n    }\n\n    execute(): void {\n        this.shape.lineWidth = this.newWidth;\n        this.repository.notify();\n    }\n\n    undo(): void {\n        this.shape.lineWidth = this.oldWidth;\n        this.repository.notify();\n    }\n} ","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\nimport type { WithDimensions, WithRadius } from \"../../interfaces/shape-properties\";\nimport { hasDimensions, hasRadius } from \"../../interfaces/shape-properties\";\nimport { Line } from \"../Line\";\n\nexport class ChangeDimensionsCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n    private oldWidth: number;\n    private oldHeight: number;\n    private newWidth: number;\n    private newHeight: number;\n    private isLine: boolean;\n    private isRect: boolean;\n    private isCircle: boolean;\n\n    constructor(shape: Shape, repository: ShapesRepository, newWidth: number, newHeight: number) {\n        this.shape = shape;\n        this.repository = repository;\n        this.newWidth = newWidth;\n        this.newHeight = newHeight;\n\n        this.isLine = shape instanceof Line;\n        this.isRect = hasDimensions(shape as any);\n        this.isCircle = hasRadius(shape as any);\n\n        // Сохраняем старые значения\n        if (this.isLine) {\n            const line = shape as Line;\n            this.oldWidth = Math.abs(line.x2 - line.x);\n            this.oldHeight = Math.abs(line.y2 - line.y);\n        } else if (this.isRect) {\n            const rect = shape as unknown as WithDimensions;\n            this.oldWidth = rect.width;\n            this.oldHeight = rect.height;\n        } else if (this.isCircle) {\n            const circle = shape as unknown as WithRadius;\n            this.oldWidth = circle.radius * 2;\n            this.oldHeight = circle.radius * 2;\n        } else {\n            this.oldWidth = 0;\n            this.oldHeight = 0;\n        }\n    }\n\n    execute(): void {\n        this.applyDimensions(this.newWidth, this.newHeight);\n        this.repository.notify();\n    }\n\n    undo(): void {\n        this.applyDimensions(this.oldWidth, this.oldHeight);\n        this.repository.notify();\n    }\n\n    private applyDimensions(width: number, height: number): void {\n        if (this.isLine) {\n            const line = this.shape as Line;\n            const widthDirection = (line.x2 - line.x) >= 0 ? 1 : -1;\n            const heightDirection = (line.y2 - line.y) >= 0 ? 1 : -1;\n            line.x2 = line.x + (width * widthDirection);\n            line.y2 = line.y + (height * heightDirection);\n        } else if (this.isRect) {\n            const rect = this.shape as unknown as WithDimensions;\n            rect.width = width;\n            rect.height = height;\n        } else if (this.isCircle) {\n            const circle = this.shape as unknown as WithRadius;\n            // Для круга берем среднее между шириной и высотой\n            circle.radius = Math.max(width, height) / 2;\n        }\n    }\n} ","import type { Shape } from \"../entities/Shape\";\nimport type { ShapesRepository } from \"../interfaces/shapes-repository\";\nimport type { HistoryManager } from \"./history-manager\";\nimport { ChangeFillColorCommand } from \"../entities/commands/change-fill-color-command\";\nimport { ChangeStrokeColorCommand } from \"../entities/commands/change-stroke-color-command\";\nimport { ChangeLineWidthCommand } from \"../entities/commands/change-line-width-command\";\nimport { ChangeDimensionsCommand } from \"../entities/commands/change-dimensions-command\";\nimport type { ShapePropertyChanger } from \"../interfaces/shape-property-changer\";\n\nexport class ChangeShapeProperty implements ShapePropertyChanger {\n    private shapesRepository: ShapesRepository;\n    private historyManager: HistoryManager;\n\n    constructor(shapesRepository: ShapesRepository, historyManager: HistoryManager) {\n        this.shapesRepository = shapesRepository;\n        this.historyManager = historyManager;\n    }\n\n    changeFillColor(shape: Shape, color: string): void {\n        const command = new ChangeFillColorCommand(shape, this.shapesRepository, color);\n        this.historyManager.execute(command);\n    }\n\n    changeStrokeColor(shape: Shape, color: string): void {\n        const command = new ChangeStrokeColorCommand(shape, this.shapesRepository, color);\n        this.historyManager.execute(command);\n    }\n\n    changeLineWidth(shape: Shape, width: number): void {\n        const command = new ChangeLineWidthCommand(shape, this.shapesRepository, width);\n        this.historyManager.execute(command);\n    }\n\n    changeDimensions(shape: Shape, width: number, height: number): void {\n        const command = new ChangeDimensionsCommand(shape, this.shapesRepository, width, height);\n        this.historyManager.execute(command);\n    }\n} ","import type { Command } from \"../interfaces/command\";\nimport type { IHistoryManager } from \"../interfaces/history-manager\";\n\nexport class HistoryManager implements IHistoryManager {\n    private undoStack: Command[] = [];\n    private redoStack: Command[] = [];\n    private undoButton: HTMLButtonElement | null = null;\n    private redoButton: HTMLButtonElement | null = null;\n\n    constructor() {\n        this.undoButton = document.getElementById('undo-btn') as HTMLButtonElement;\n        this.redoButton = document.getElementById('redo-btn') as HTMLButtonElement;\n\n        this.updateButtonStates();\n    }\n\n    execute(command: Command): void {\n        command.execute();\n        this.undoStack.push(command);\n        this.redoStack = [];\n        this.updateButtonStates();\n    }\n\n    undo(): void {\n        const command = this.undoStack.pop();\n        if (command) {\n            command.undo();\n            this.redoStack.push(command);\n            this.updateButtonStates();\n        }\n    }\n\n    redo(): void {\n        const command = this.redoStack.pop();\n        if (command) {\n            command.execute();\n            this.undoStack.push(command);\n            this.updateButtonStates();\n        }\n    }\n\n    canUndo(): boolean {\n        return this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return this.redoStack.length > 0;\n    }\n\n    clear(): void {\n        this.undoStack = [];\n        this.redoStack = [];\n        this.updateButtonStates();\n    }\n\n    private updateButtonStates(): void {\n        if (this.undoButton) {\n            this.undoButton.disabled = !this.canUndo();\n        }\n\n        if (this.redoButton) {\n            this.redoButton.disabled = !this.canRedo();\n        }\n    }\n} ","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\n\nexport class MoveShapeCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n    private dx: number;\n    private dy: number;\n\n    constructor(shape: Shape, repository: ShapesRepository, dx: number, dy: number) {\n        this.shape = shape;\n        this.repository = repository;\n        this.dx = dx;\n        this.dy = dy;\n    }\n\n    execute(): void {\n        this.shape.move(this.dx, this.dy);\n        this.repository.notify();\n    }\n\n    undo(): void {\n        this.shape.move(-this.dx, -this.dy);\n        this.repository.notify();\n    }\n} ","import type { Shape } from \"../entities/Shape\";\nimport type { ShapesRepository } from \"../interfaces/shapes-repository\";\nimport { MoveShapeCommand } from \"../entities/commands/move-shape-command\";\nimport type { HistoryManager } from \"./history-manager\";\n\nexport class MoveShape {\n    private shapesRepository: ShapesRepository;\n    private historyManager: HistoryManager;\n\n    constructor(shapesRepository: ShapesRepository, historyManager: HistoryManager) {\n        this.shapesRepository = shapesRepository;\n        this.historyManager = historyManager;\n    }\n\n    execute(shape: Shape, dx: number, dy: number) {\n        const command = new MoveShapeCommand(shape, this.shapesRepository, dx, dy);\n        this.historyManager.execute(command);\n    }\n\n    executeById(id: string, dx: number, dy: number) {\n        const shape = this.shapesRepository.get(id);\n        if (shape) {\n            this.execute(shape, dx, dy);\n        }\n    }\n} ","import type { Command } from \"../../interfaces/command\";\nimport type { Shape } from \"../Shape\";\nimport type { ShapesRepository } from \"../../interfaces/shapes-repository\";\n\nexport class RemoveShapeCommand implements Command {\n    private shape: Shape;\n    private repository: ShapesRepository;\n\n    constructor(shape: Shape, repository: ShapesRepository) {\n        this.shape = shape;\n        this.repository = repository;\n    }\n\n    execute(): void {\n        this.repository.remove(this.shape.id);\n    }\n\n    undo(): void {\n        this.repository.add(this.shape);\n    }\n} ","import type { Shape } from \"../entities/Shape\";\nimport type { ShapesRepository } from \"../interfaces/shapes-repository\";\nimport { RemoveShapeCommand } from \"../entities/commands/remove-shape-command\";\nimport type { HistoryManager } from \"./history-manager\";\n\nexport class RemoveShape {\n    private shapesRepository: ShapesRepository;\n    private historyManager: HistoryManager;\n\n    constructor(shapesRepository: ShapesRepository, historyManager: HistoryManager) {\n        this.shapesRepository = shapesRepository;\n        this.historyManager = historyManager;\n    }\n\n    execute(shape: Shape) {\n        const command = new RemoveShapeCommand(shape, this.shapesRepository);\n        this.historyManager.execute(command);\n    }\n\n    executeById(id: string) {\n        const shape = this.shapesRepository.get(id);\n        if (shape) {\n            this.execute(shape);\n        }\n    }\n} ","import type { Tool } from \"../entities/Tool\";\nimport type { IToolManager } from \"../interfaces/tool-manager\";\n\nexport class ToolManager implements IToolManager {\n    private tools: Record<string, Tool>;\n    private activeTool: Tool | null = null;\n    private activeToolButton: HTMLElement | null = null;\n\n    constructor(tools: Record<string, Tool>) {\n        this.tools = tools;\n    }\n\n    getActiveTool(): Tool {\n        if (!this.activeTool) {\n            throw new Error(\"No active tool selected\");\n        }\n        return this.activeTool;\n    }\n\n    setActiveTool(toolName: string): void {\n        const tool = this.tools[toolName];\n        if (!tool) {\n            console.error(`Tool ${toolName} not found`);\n            return;\n        }\n\n        // Деактивируем текущий инструмент, если есть\n        if (this.activeTool) {\n            this.activeTool.deactivate();\n        }\n\n        // Обновляем активный инструмент\n        this.activeTool = tool;\n        this.activeTool.activate();\n\n        // Обновляем UI\n        if (this.activeToolButton) {\n            this.activeToolButton.classList.remove('active');\n        }\n\n        const toolButton = document.getElementById(`${toolName.toLowerCase()}-btn`);\n        if (toolButton) {\n            toolButton.classList.add('active');\n            this.activeToolButton = toolButton;\n        }\n    }\n\n    getTools(): Record<string, Tool> {\n        return this.tools;\n    }\n}","import type { ShapesRepository } from \"../core/interfaces/shapes-repository\";\nimport type { IRenderingManager } from \"../core/interfaces/rendering-manager\";\n\nexport class CanvasView {\n    private shapesRepo: ShapesRepository;\n    private renderingManager: IRenderingManager;\n\n    constructor(\n        shapesRepo: ShapesRepository,\n        renderingManager: IRenderingManager\n    ) {\n        this.shapesRepo = shapesRepo;\n        this.renderingManager = renderingManager;\n\n        shapesRepo.subscribe(() => this.updateShapes());\n\n        this.renderingManager.startRendering();\n    }\n\n    private updateShapes(): void {\n        const shapes = this.shapesRepo.getAll();\n        this.renderingManager.setShapes(shapes);\n    }\n}","import { ToolManager } from \"../core/use-cases/tool-manager\";\n\nexport class Toolbar {\n    private toolManager: ToolManager\n    constructor(\n        toolManager: ToolManager\n    ) {\n        this.toolManager = toolManager\n        this.setupEventListeners();\n    }\n\n    private setupEventListeners() {\n        // Кнопка выбора (Select)\n        document.getElementById(\"select-btn\")?.addEventListener(\"click\", () => {\n            this.toolManager.setActiveTool(\"Select\");\n            this.updateToolbarState(\"Select\");\n        });\n\n        // Кнопка прямоугольника (Rect)\n        document.getElementById(\"rect-btn\")?.addEventListener(\"click\", () => {\n            this.toolManager.setActiveTool(\"Rect\");\n            this.updateToolbarState(\"Rect\");\n        });\n\n        // Кнопка линии (Line)\n        document.getElementById(\"line-btn\")?.addEventListener(\"click\", () => {\n            this.toolManager.setActiveTool(\"Line\");\n            this.updateToolbarState(\"Line\");\n        });\n\n        // Кнопка круга (Circle)\n        document.getElementById(\"circle-btn\")?.addEventListener(\"click\", () => {\n            this.toolManager.setActiveTool(\"Circle\");\n            this.updateToolbarState(\"Circle\");\n        });\n    }\n\n    private updateToolbarState(activeToolName: string) {\n        document.querySelectorAll(\".toolbar .tool\").forEach(element => {\n            element.classList.remove(\"active\");\n        });\n\n        const activeToolButton = document.getElementById(`${activeToolName.toLowerCase()}-btn`);\n        if (activeToolButton) {\n            activeToolButton.classList.add(\"active\");\n        }\n    }\n}","import { Circle } from \"../core/entities/Circle\";\nimport { Line } from \"../core/entities/Line\";\nimport { Rect } from \"../core/entities/Rect\";\nimport type { Shape } from \"../core/entities/Shape\";\nimport type { ShapesRepository } from \"../core/interfaces/shapes-repository\";\nimport type { IRenderingManager } from \"../core/interfaces/rendering-manager\";\nimport type { RemoveShape } from \"../core/use-cases/remove-shape\";\n\nexport class LayersPanel {\n    private shapesRepo: ShapesRepository;\n    private renderingManager: IRenderingManager;\n    private layersContainer: HTMLElement;\n    private removeShape: RemoveShape;\n\n    constructor(\n        shapesRepo: ShapesRepository,\n        renderingManager: IRenderingManager,\n        removeShape: RemoveShape\n    ) {\n        this.shapesRepo = shapesRepo;\n        this.renderingManager = renderingManager;\n        this.removeShape = removeShape;\n        this.layersContainer = document.getElementById('layers-container') as HTMLElement;\n\n        if (!this.layersContainer) {\n            console.error('Контейнер для слоев не найден');\n            return;\n        }\n\n        shapesRepo.subscribe(() => this.updateLayers());\n\n        this.updateLayers();\n    }\n\n    private updateLayers(): void {\n        if (!this.layersContainer) return;\n\n        this.layersContainer.innerHTML = '';\n\n        const shapes = this.shapesRepo.getAll();\n        const selectedShape = this.renderingManager.selectedShape;\n\n        if (shapes.length === 0) {\n            const emptyMessage = document.createElement('div');\n            emptyMessage.style.color = '#999';\n            emptyMessage.style.fontSize = '13px';\n            emptyMessage.style.textAlign = 'center';\n            emptyMessage.style.padding = '20px 0';\n            emptyMessage.textContent = 'Нет объектов';\n            this.layersContainer.appendChild(emptyMessage);\n            return;\n        }\n\n        shapes.forEach((shape) => {\n            const layerItem = document.createElement('div');\n            layerItem.className = 'layer-item';\n\n            if (selectedShape && selectedShape.id === shape.id) {\n                layerItem.classList.add('selected');\n            }\n\n            const icon = document.createElement('span');\n            icon.className = 'layer-icon';\n\n            if (shape instanceof Rect) {\n                icon.innerHTML = '<svg viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M19,19H5V5h14V19z\"></path></svg>';\n            } else if (shape instanceof Circle) {\n                icon.innerHTML = '<svg viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M12,2C6.48,2,2,6.48,2,12s4.48,10,10,10s10-4.48,10-10S17.52,2,12,2z M12,20c-4.42,0-8-3.58-8-8s3.58-8,8-8s8,3.58,8,8 S16.42,20,12,20z\"></path></svg>';\n            } else if (shape instanceof Line) {\n                icon.innerHTML = '<svg viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M19,13H5v-2h14V13z\"></path></svg>';\n            }\n\n            const name = document.createElement('span');\n            name.className = 'layer-name';\n            name.textContent = this.getShapeName(shape);\n\n            // Создаем кнопку удаления\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'layer-delete-btn';\n            deleteBtn.innerHTML = '×';\n            deleteBtn.title = 'Удалить';\n            deleteBtn.addEventListener('click', (e) => {\n                e.stopPropagation(); // Предотвращаем выделение при удалении\n\n                // Если удаляем выбранную фигуру, снимаем выделение\n                if (selectedShape && selectedShape.id === shape.id) {\n                    this.renderingManager.setSelectedShape(null);\n                }\n\n                this.removeShape.execute(shape);\n            });\n\n            layerItem.appendChild(icon);\n            layerItem.appendChild(name);\n            layerItem.appendChild(deleteBtn);\n\n            layerItem.addEventListener('click', () => {\n                const selectedTool = this.renderingManager.selectedShape;\n\n                if (selectedTool && selectedTool.id === shape.id) {\n                    this.renderingManager.setSelectedShape(null);\n                } else {\n                    this.renderingManager.setSelectedShape(shape);\n                }\n\n                this.updateLayers();\n            });\n\n            this.layersContainer.insertBefore(layerItem, this.layersContainer.firstChild);\n        });\n    }\n\n    private getShapeName(shape: Shape): string {\n        if (shape instanceof Rect) {\n            return `Прямоугольник ${shape.id.slice(0, 4)}`;\n        } else if (shape instanceof Circle) {\n            return `Круг ${shape.id.slice(0, 4)}`;\n        } else if (shape instanceof Line) {\n            return `Линия ${shape.id.slice(0, 4)}`;\n        }\n        return `Фигура ${shape.id.slice(0, 4)}`;\n    }\n} ","import { CanvasInputHandler } from \"./adapters/input/canvas-input-handler\";\nimport { CanvasRenderer } from \"./adapters/renderers/canvas-renderer\";\nimport { RenderingManager } from \"./adapters/renderers/rendering-manager\";\nimport { FileManager } from \"./adapters/storage/file-manager\";\nimport { MemoryShapesRepository } from \"./adapters/storage/memory-shapes-repository\";\nimport type { Tool } from \"./core/entities/Tool\";\nimport { ToolCircle } from \"./ui/tools/tool-circle\";\nimport { ToolLine } from \"./ui/tools/tool-line\";\nimport { ToolRect } from \"./ui/tools/tool-rect\";\nimport { ToolSelect } from \"./ui/tools/tool-select\";\nimport { AddShape } from \"./core/use-cases/add-shape\";\nimport { ChangeShapeProperty } from \"./core/use-cases/change-shape-property\";\nimport { HistoryManager } from \"./core/use-cases/history-manager\";\nimport { MoveShape } from \"./core/use-cases/move-shape\";\nimport { RemoveShape } from \"./core/use-cases/remove-shape\";\nimport { ToolManager } from \"./core/use-cases/tool-manager\";\nimport { CanvasView } from \"./ui/canvas-view\";\nimport { Toolbar } from \"./ui/toolbar\";\nimport { LayersPanel } from \"./ui/layers-panel\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nif (!canvas) {\n  throw new Error(\"Canvas element not found\");\n}\n\nconst ctx = canvas.getContext(\"2d\");\nif (!ctx) {\n  throw new Error(\"Could not get 2D context from canvas\");\n}\n\n// Создаем основные компоненты\nconst renderer = new CanvasRenderer(ctx);\nconst renderingManager = new RenderingManager(renderer);\nconst repo = new MemoryShapesRepository();\nconst canvasInput = new CanvasInputHandler(canvas);\nconst historyManager = new HistoryManager();\nconst addShape = new AddShape(repo, historyManager);\nconst removeShape = new RemoveShape(repo, historyManager);\nconst moveShape = new MoveShape(repo, historyManager);\nconst changeShapeProperty = new ChangeShapeProperty(repo, historyManager);\n\n// Создаем инструменты\nconst tools: Record<string, Tool> = {\n  Select: new ToolSelect(canvasInput, addShape, repo, renderingManager, moveShape, changeShapeProperty, removeShape),\n  Rect: new ToolRect(canvasInput, addShape, renderingManager),\n  Line: new ToolLine(canvasInput, addShape, renderingManager),\n  Circle: new ToolCircle(canvasInput, addShape, renderingManager),\n};\n\n// Инициализация UI\nconst toolManager = new ToolManager(tools);\nnew Toolbar(toolManager);\nnew CanvasView(repo, renderingManager);\nnew LayersPanel(repo, renderingManager, removeShape);\n\n// Создаем менеджер файлов для импорта/экспорта\nnew FileManager(canvas, repo, historyManager, renderingManager, toolManager);\n\n// Настраиваем кнопки undo/redo\nconst undoButton = document.getElementById('undo-btn');\nconst redoButton = document.getElementById('redo-btn');\n\nif (undoButton) {\n  undoButton.addEventListener('click', () => {\n    historyManager.undo();\n  });\n}\n\nif (redoButton) {\n  redoButton.addEventListener('click', () => {\n    historyManager.redo();\n  });\n}\n\n// Настраиваем горячие клавиши для undo/redo\ndocument.addEventListener('keydown', (e) => {\n  // Ctrl+Z или Cmd+Z для отмены\n  if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.keyCode === 90) && !e.shiftKey) {\n    e.preventDefault();\n    historyManager.undo();\n  }\n\n  // Ctrl+Shift+Z или Cmd+Shift+Z для повтора\n  if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.keyCode === 90) && e.shiftKey) {\n    e.preventDefault();\n    historyManager.redo();\n  }\n});\n\n// Добавляем поддержку клавиатурных сокращений для инструментов\ndocument.addEventListener('keydown', (e) => {\n  if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n    return;\n  }\n\n  switch (e.keyCode) {\n    case 83: // 'S' \n      toolManager.setActiveTool(\"Select\");\n      break;\n    case 82: // 'R' \n      toolManager.setActiveTool(\"Rect\");\n      break;\n    case 76: // 'L' \n      toolManager.setActiveTool(\"Line\");\n      break;\n    case 67: // 'C' \n      toolManager.setActiveTool(\"Circle\");\n      break;\n  }\n});\n\n// Инициализируем начальное состояние\nrepo.subscribe(() => renderingManager.setShapes(repo.getAll()));\nrenderingManager.setShapes(repo.getAll());\nrenderingManager.startRendering();\n\n// Активируем инструмент выбора по умолчанию\ntoolManager.setActiveTool(\"Select\");"],"names":["CanvasInputHandler","canvas","__publicField","x","y","cb","event","callback","rect","CanvasRenderer","ctx","x1","y1","x2","y2","color","lineWidth","width","height","lineColor","radius","Shape","id","dx","dy","Circle","Line","lineLength","distance","dot1","dot2","Rect","RenderingManager","renderer","shapes","shape","renderFrame","FileManager","repo","historyManager","renderingManager","toolManager","e","target","exportPngButton","exportJsonButton","importJsonButton","message","isError","toast","dataURL","downloadLink","date","fileName","error","projectData","jsonString","blob","url","shapeData","file","reader","_a","MemoryShapesRepository","Tool","canvasInput","addShape","ToolCircle","idGenerator","ToolLine","ToolRect","ShapeSelectionManager","ShapeDragHandler","moveShape","newX","newY","hasLineColor","obj","hasDimensions","hasRadius","ShapePropertiesPanel","changeShapeProperty","selectionManager","places","fillColorPicker","strokeColorPicker","strokeWidthSlider","widthInput","heightInput","shapeWithLine","shapeWithDimensions","shapeWithRadius","value","ToolSelect","shapesRepo","removeShape","selectedShape","i","AddShapeCommand","repository","AddShape","shapesRepository","command","ChangeFillColorCommand","newColor","ChangeStrokeColorCommand","ChangeLineWidthCommand","newWidth","ChangeDimensionsCommand","newHeight","line","circle","widthDirection","heightDirection","ChangeShapeProperty","HistoryManager","MoveShapeCommand","MoveShape","RemoveShapeCommand","RemoveShape","ToolManager","tools","toolName","tool","toolButton","CanvasView","Toolbar","_b","_c","_d","activeToolName","element","activeToolButton","LayersPanel","emptyMessage","layerItem","icon","name","deleteBtn","selectedTool","undoButton","redoButton"],"mappings":"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"}